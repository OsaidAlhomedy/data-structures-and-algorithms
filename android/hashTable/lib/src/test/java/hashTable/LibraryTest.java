/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashTable;

import hashTable.base.HashTable;
import org.junit.jupiter.api.Test;

import java.util.Objects;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

  @Test
  public void hashTableTesting() {
    HashTable<String, String> hashTable = new HashTable<>();

    // Testing the item is added and retrieve the value
    hashTable.add("Osaid", "student");
    assertEquals("student", hashTable.get("Osaid"));

    // Testing the item is added and retrieve the value
    assertNull(hashTable.get("Blah"));

    // Testing Collisions adding and getting
    hashTable.add("Khaleel", "student");
    assertEquals("student", hashTable.get("Khaleel"));


  }

  @Test
  public void repeatedWordTest() {

    HashTable<String, String> hashTable = new HashTable<>();
    String string1 = "Once upon a time, there was a brave princess who...";

    String string2 = "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only...";
    HashTable<String, String> hashTable2 = new HashTable<>();

    String string3 = "It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York...";
    HashTable<String, String> hashTable3 = new HashTable<>();

    // the happy way
    assertEquals("a", hashTable.repeatedWord(string1));
    assertEquals("it", hashTable2.repeatedWord(string2));
    assertEquals("summer", hashTable3.repeatedWord(string3));

    // Edge Cases
    String falseString = " ";
    assertNull(hashTable.repeatedWord(falseString));

    //    No duplicated words
    String noDuplicatedString = "Hello my name is slim shady";
    assertNull(hashTable.repeatedWord(noDuplicatedString));
  }

  @Test
  public void leftJoinTest() {

    //Testing the happy path

    HashTable<String,String> ht1 = new HashTable<>();
    ht1.add("osaid","student");
    ht1.add("ammar","assistant");
    ht1.add("jason","instructor");

    HashTable<String,String> ht2 = new HashTable<>();
    ht2.add("osaid","24");
    ht2.add("naim","26");
    ht2.add("jason","33");

    assertEquals("[[ammar, assistant, null], [osaid, student, 24], [jason, instructor, 33]]",HashTable.leftJoin(ht1,ht2).toString());

    // Testing edge cases
    HashTable<String,String> ht3 = new HashTable<>();
    HashTable<String,String> ht4 = new HashTable<>();

    assertEquals("[]",HashTable.leftJoin(ht3,ht4).toString());

  }

}
