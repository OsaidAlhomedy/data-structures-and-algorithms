/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue.challenges;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import stack.and.queue.challenges.base.PseudoQueue;
import stack.and.queue.challenges.base.Queue;
import stack.and.queue.challenges.base.Stack;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

  @DisplayName("This test is for the stacks")
  @Test
  void stackTesting() {

    // testing the isEmpty Method
    Stack osaidStack = new Stack();
    assertTrue(osaidStack.isEmpty());
    assertEquals("The stack is empty", osaidStack.pop());

    // testing the push Method
    osaidStack.push("osaid");
    osaidStack.push("Sad");


    assertEquals("Sad", osaidStack.peek());
    assertFalse(osaidStack.isEmpty());

    // testing the pop Method
    assertEquals("Sad", osaidStack.pop());
    assertEquals("osaid", osaidStack.peek());

  }


  @DisplayName("This test is for the queue")
  @Test
  void queueTesting() {

    // testing the isEmpty Method
    Queue osaidQueue = new Queue();
    assertTrue(osaidQueue.isEmpty());
    assertEquals("Queue is empty", osaidQueue.deQueue());

    // testing the enQueue Method
    osaidQueue.enQueue("osaid");
    osaidQueue.enQueue("Sad");


    assertEquals("osaid", osaidQueue.peek());
    assertFalse(osaidQueue.isEmpty());

    // testing the deQueue Method
    assertEquals("osaid", osaidQueue.deQueue());
    assertEquals("Sad", osaidQueue.peek());


  }


  @DisplayName("This test is for the pseudo queue")
  @Test
  void pseudoQueueTesting() {

    // testing the isEmpty Method
    PseudoQueue osaidQueue = new PseudoQueue();
    assertEquals("The stack is empty", osaidQueue.deQueue());

    // testing the enQueue Method
    osaidQueue.enQueue("Osaid");
    osaidQueue.enQueue("Sad");


    assertEquals("Osaid", osaidQueue.deQueue());


  }

  @DisplayName("This test is for the Animal shelter Class")
  @Test
  void animalShelterQueueTesting() {

    AnimalShelter<Animal> planetZoo = new AnimalShelter<>();

    Animal didi = new Animal("cat");
    Animal roxy = new Animal("dog");
    Animal fulla = new Animal("cat");

    //Testing enqueuing in the shelter
    planetZoo.enQueue(didi);
    planetZoo.enQueue(roxy);
    planetZoo.enQueue(fulla);

    //Testing to peek at the first node
    assertEquals("cat", planetZoo.peek().getType());

    //Testing to get the first cat
    assertEquals("cat", planetZoo.deQueue("cat").getType());

    //Testing to get the first dog
    assertEquals("dog", planetZoo.deQueue("dog").getType());

    //Testing returning null if it is neither cat nor dog
    assertNull(planetZoo.deQueue("fish"));


  }

  @DisplayName("This test is for the Validator")
  @Test
  void validatorTesting() {
    System.out.println(Validator.validateBrackets(""));
    System.out.println(Validator.validateBrackets("{}{Code}[Fellows](())"));

    //TEST THE EDGE CASES
    assertFalse(Validator.validateBrackets(""));
    assertFalse(Validator.validateBrackets(null));
    assertFalse(Validator.validateBrackets(")"));

    //TEST TRUE
    assertTrue(Validator.validateBrackets("{}(){}"));
    assertTrue(Validator.validateBrackets("()[[Extra Characters]]"));
    assertTrue(Validator.validateBrackets("{}{Code}[Fellows](())"));

    //TEST False
    assertFalse(Validator.validateBrackets("[({}]"));
    assertFalse(Validator.validateBrackets("(]("));

  }


}
